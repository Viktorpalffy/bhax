<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Caesar!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
        <title><type>double**</type> háromszögmátrix</title>
        <para>Írj egy olyan <function>malloc</function> és <function>free</function>
            párost használó C programot, amely helyet foglal
            egy alsó háromszög mátrixnak a szabad tárban!
        </para>
	
        <para>
            Megoldás videó:<link xlink:href="https://youtu.be/1_EcjAmCTHA">https://youtu.be/1_EcjAmCTHA</link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://github.com/Viktorpalffy/bhax/blob/master/bhax/thematic_tutorials/bhax_textbook_IgyNeveldaProgramozod/Caesar/tm.c">https://github.com/Viktorpalffy/bhax/blob/master/bhax/thematic_tutorials/bhax_textbook_IgyNeveldaProgramozod/Caesar/tm.c</link>              
        </para>
	<para>
	A megoldás forrása <link xlink:href="https://gitlab.com/nbatfai/bhax/blob/master/thematic_tutorials/bhax_textbook_IgyNeveldaProgramozod/Caesar/tm.c">Bátfai Norbert</link> tulajdona.
	</para>
        <para>
            Először is egy alapfogalom: Az alsó háromszög mátrixnak ugyanannyi sora van, mint oszlopa. Ezen kívül még egy nagyon fontos tényezője az is, hogy a főátlója felett csak 0 szerepel.
	</para>
	<para> 
	Az ilyen mátrixokat, ha tömbökben tároljuk, akkor nincs értelme a nullákat is tárolni a többi, számunkra fontos elemmel együtt, ezért ezeket nem is tároljuk.
	Amikor egy ilyen tömböt vissza szeretnénk alakítani az eredeti alakjára, akkor sorfolytonosan írjuk fel az elemeit. Ez annyit jelent, hogy a mátrix első sorába az első elemet írjuk fel,
	a második sorába a második és harmadik elemet és így tovább minden sorban eggyel több elemet írunk fel mint az előző sorban.
        </para>     
	<para>
		Ebben a programban egy ilyen alsó háromszög mátrixot hozunk létre egy <programlisting language="c"><![CDATA[double **]]> </programlisting> segítségével. Ez egy pointerre mutató pointer, ami tökéletes a többdimenziós tömbök használatához.
	</para>
	<para>
		Ezek után a következő kis programrészlet: 
	<programlisting language="c"><![CDATA[if ((tm = (double **) malloc (nr * sizeof (double *))) == NULL)
    {
        return -1;
    }
    printf("%p\n", tm);
    
    for (int i = 0; i < nr; ++i)
    {
        if ((tm[i] = (double *) malloc ((i + 1) * sizeof (double))) == NULL)
        {
            return -1;
        }
}]]> </programlisting>
	Ellenőrzi, hogy történt e valamilyen memóriahiba, (pl. nincs tele a memória?) és ha történt, akkor -1-el tér vissza.
	</para>
	<para>
		Ellenkező esetben a program a <programlisting language="c"><![CDATA[tm[i][j] = i * (i + 1) / 2 + j;]]> </programlisting> képletet használva feltölti a tömböt. Ezután két egymásba ágyazott for ciklus segítségével kiírja azt.
	</para>
	<para>
		Ezek után módosítunk a tömb egyes elemein, majd megint kiírjuk őket.
	</para>       
	<para>
		Legvégül, pedig a <programlisting language="c"><![CDATA[for (int i = 0; i < nr; ++i)
        free (tm[i]);
free (tm);]]></programlisting> függvény használatával felszabadítjuk a tömbnek lefoglalt helyet.
	</para>
	<para>
	A program futtatásnál a következő memóriacímeket írta ki:
	</para>
	<programlisting>
	<![CDATA[./tm
0x7ffe0319d900
0x56541c20c670
0x56541c20c6a0
]]>
	</programlisting>
	<para>
	Aminek a jelentése:
	</para>
	<mediaobject>
            <imageobject>
                <imagedata fileref="img/doublecscs.png"/>
            </imageobject>
        </mediaobject>
	<para>
	A képnek az alapját Bátfai Norbert biztosította, azt módosítottam.
	</para>
    </section>        
    <section>
        <title>C EXOR titkosító</title>
        <para>
            Írj egy EXOR titkosítót C-ben!
        </para>
        <para>
            Megoldás videó:<link xlink:href="https://youtu.be/osQ0iZu4Swg">https://youtu.be/osQ0iZu4Swg</link>
        </para>
        <para>
            Megoldás forrása:  <link xlink:href="https://github.com/Viktorpalffy/bhax/blob/master/bhax/thematic_tutorials/bhax_textbook_IgyNeveldaProgramozod/Caesar/exor.c">https://github.com/Viktorpalffy/bhax/blob/master/bhax/thematic_tutorials/bhax_textbook_IgyNeveldaProgramozod/Caesar/exor.c</link>
        </para>
	<para>
	A megoldás forrása <link xlink:href="https://progpater.blog.hu/2011/02/15/felvetelt_hirdet_a_cia">Bátfai Norbert</link> tulajdona.
	</para>
        <para>
            Ez a fajta titkosítás a kizáró vagy műveleten alapul. A megadott kulcs, és a forrásfájl karaktereit kizáró vaggyal titkosítva egy szöveget úgy tudunk titkosítani, hogy egy olvashatatlan karakterhalmazt kapunk végeredményül. Viszont az a személy, aki ismeri a kulcsot ugyanolyan egyszerűen vissza is tudja alakítani a szöveget az eredeti alakjára úgy, hogy mégegyszer lefuttatja a programot, de a titkosított forrást adja meg titkosítandóként, ezzel visszakapva az eredeti szöveget. Így más nem tudja elolvasni a titkainkat, csak az, aki ismeri hozzá a kulcsot.
	</para>
	<para>
Először is a <programlisting language="c"><![CDATA[#define MAX_KULCS 100
#define BUFFER_MERET 256]]> </programlisting> használatával megadjuk a maximális kulcs és buffer méretet. a main osztály első argumentuma a kulcs lesz, mig a második az maga a szöveg, amit titkosítani szeretnénk.
        </para>
	<para> A következő ciklusok használatával:
	<programlisting language="c"><![CDATA[while ((olvasott_bajtok = read (0, (void *) buffer, BUFFER_MERET)))
    {
      for (int i = 0; i < olvasott_bajtok; ++i)
	{
	  buffer[i] = buffer[i] ^ kulcs[kulcs_index];
	  kulcs_index = (kulcs_index + 1) % kulcs_meret;
	}
      write (1, buffer, olvasott_bajtok);
}]]></programlisting>
		program végigmegy a bemeneti adatok (titkosítandó fájl) karakterein, mindegyiket titkosítja a kulcs használatával és kiírja a végeredményt.
	</para> 
	<para>
		A program használata: ./exor kulcs <![CDATA[<titkosítandó fájl>]]> titkosított fájl
	</para>
	<para>
		Erre egy példa: <command>./exor 12345678 <![CDATA[<lista>]]> titkoslista </command>
	</para>           
    </section>        
    <section>
        <title>Java EXOR titkosító</title>
        <para>
            Írj egy EXOR titkosítót Java-ban!
        </para>

        <para>
            Megoldás videó:<link xlink:href="https://youtu.be/P7PbIIRZiSA">https://youtu.be/P7PbIIRZiSA</link>
        </para>

        <para>
            Megoldás forrása:    <link xlink:href="https://github.com/Viktorpalffy/bhax/blob/master/bhax/thematic_tutorials/bhax_textbook_IgyNeveldaProgramozod/Caesar/exor.java">https://github.com/Viktorpalffy/bhax/blob/master/bhax/thematic_tutorials/bhax_textbook_IgyNeveldaProgramozod/Caesar/exor.java</link>
        </para>

	<para>
	A megoldás forrása <link xlink:href="https://www.tankonyvtar.hu/hu/tartalom/tkt/javat-tanitok-javat/ch01.html#exor_titkosito">Bátfai Norbert</link> tulajdona.
	</para>

        <para>
            Itt az előző feladatban megírt EXOR titkosítót írjuk át java nyelvre.
	    Ehhez importálnunk kell az input/output streamet. Ez ahhoz kell,  hogy olvasni tudjuk a bemeneti fájlt, illetve, hogy írni tudjuk a kimeneti fájlt.
        </para>
	<para>
	A main-ben megpróbáljuk a try-al beolvasni az args tömbbe azt a fájlt, amit titkosítani szeretnénk és ha ez nem sikerült, akkor "elkapjuk" a hibát a catch szerkezettel, és kiíratjuk, hogy mi a hiba:
	</para>
	<programlisting><![CDATA[[
	public static void main(String[] args) {
        
        try {
            
            new ExorTitkosító(args[0], System.in, System.out);
            
        } catch(java.io.IOException e) {
            
            e.printStackTrace();   
        }  
}
	]]></programlisting>
	
	<para>
	Ha viszont sikerült beolvasni a fájlt, akkor az ExorTitkosító nevű függvényt meghívva előállítjuk a titkosított szöveget. A System.in illetve System.out a bemenő és a kimenő fájlra utalnak.
	</para>
	
	<para>
	Először a függvény átadja a program a kulcs nevű tömbjének a bemenő szöveget, és létrehoz egy buffer nevű tömböt is 256-os mérettel. Erre az EXOR művelethez lesz szükség.
	</para>
	<para>
	Végül a program egy while-ba épített for ciklus segítségével végigzongorázza a szöveget, minden egyes karakternek meghatározza a titkosított verzióját, és kiírja azt a kimeneti fájlba.
	</para>
           
    </section>        
    <section>
        <title>C EXOR törő</title>
        <para>
            Írj egy olyan C programot, amely megtöri az első feladatban előállított titkos szövegeket!
        </para>
        <para>
            Megoldás videó:<link xlink:href="https://youtu.be/oii26G1ubGk">https://youtu.be/oii26G1ubGk</link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://github.com/Viktorpalffy/bhax/blob/master/bhax/thematic_tutorials/bhax_textbook_IgyNeveldaProgramozod/Caesar/tores.c">https://github.com/Viktorpalffy/bhax/blob/master/bhax/thematic_tutorials/bhax_textbook_IgyNeveldaProgramozod/Caesar/tores.c</link>             
        </para>
	<para>
	A megoldás forrása <link xlink:href="https://progpater.blog.hu/2011/02/15/felvetelt_hirdet_a_cia">Bátfai Norbert</link> tulajdona.
	</para>
        <para>
           Elfelejtetted egy EXOR-ral titkosított fájlod kulcsát?
	   Szeretnél kutakodni mások fájljai között, de azok titkosítva vannak?
        </para>
	<para>
	 	Ne is kínlódj tovább. Az EXOR törőt neked találták ki! A program sikerességéhez mindössze annyit kell tudnod , hogy hány karakterből áll a kulcs, és máris használhatod ezt a fantasztikus programot!
	</para>
	<para>
		A működése nagyon  egyszerű. Mivel nem ismerjük a kulcsot, ezért a program az összes lehetséges kombinációt végigpróbálja. A következőkben bemutatott példában a kulcs 8 darab karakterből áll.
	</para>
	<para>
		Legelőször a program a következő while ciklus
		<programlisting><![CDATA[ while ((olvasott_bajtok =
                read (0, (void *) p,
                      (p - titkos + OLVASAS_BUFFER <
                       MAX_TITKOS) ? OLVASAS_BUFFER : titkos + MAX_TITKOS - p)))
p += olvasott_bajtok;]]></programlisting>
		használatával beolvassa a feltörni kívánt fájlt, majd a maradék helyet a bufferben, egy for ciklust használva,
	<programlisting><![CDATA[ for (int i = 0; i < MAX_TITKOS - (p - titkos); ++i)
titkos[p - titkos + i] = '\0';]]></programlisting>
	feltölti 0 értékekkel.
	</para>
	<para>
		Ezek után egy csomó (ami jelen esetben 8) for ciklussal 
		<programlisting><![CDATA[ #pragma omp parallel for private(kulcs)
    for (int ii = '0'; ii <= '9'; ++ii)
        for (int ji = '0'; ji <= '9'; ++ji)
            for (int ki = '0'; ki <= '9'; ++ki)
                for (int li = '0'; li <= '9'; ++li)
                    for (int mi = '0'; mi <= '9'; ++mi)
                        for (int ni = '0'; ni <= '9'; ++ni)
                            for (int oi = '0'; oi <= '9'; ++oi)
                                for (int pi = '0'; pi <= '9'; ++pi)
                                {
                                    kulcs[0] = ii;
                                    kulcs[1] = ji;
                                    kulcs[2] = ki;
                                    kulcs[3] = li;
                                    kulcs[4] = mi;
                                    kulcs[5] = ni;
                                    kulcs[6] = oi;
                                    kulcs[7] = pi;
                                    exor_tores (kulcs, KULCS_MERET, titkos, p - titkos);
}]]></programlisting>
	megpróbálja a program előállítani az eredeti szöveget. Azonban több kombináció is ad eredményt, ezért nekünk kell kitalálni, hogy a kapott eredmények közül melyik a helyes.
	Ezek a for ciklusok az összes magot dolgoztatni fogják, ezzel jelentősen lecsökkentve a töréshez szükséges időt.
	</para>
	<para>
		Ha a kulcs nem 8 karakterből áll, akkor sem kell aggódnunk! Csupán néhány (pontosan 3) szekcióban kell módositani a program kódját. Ezek a következők:
	</para>
	<para>
		Először is a program fejében a <programlisting><![CDATA[[#define KULCS_MERET 8]]></programlisting>
	sorban a 8-at át kell írni arra a számra, amennyi karakterből áll a kulcs.
	</para>
	<para>
		Majd a 70. és 71. sorokban lévő <programlisting><![CDATA[[ printf("Kulcs: [%c%c%c%c%c%c%c%c]\nTiszta szoveg: [%s]\n",
kulcs[0],kulcs[1],kulcs[2],kulcs[3],kulcs[4],kulcs[5],kulcs[6],kulcs[7], buffer);]]></programlisting>
	utasításokban annyi <command>%c</command> és <command>kulcs[n]</command> legyen, amennyi karakterből áll a kulcs.
	</para>
	<para>
		Végül pedig az előzőekben már látott for ciklus halmon kell módosítanunk úgy, hogy pontosan annyi <command>for</command> ciklus, és pontosan annyi <command>kulcs[n] = xi;</command> legyen a programban, amennyi karakterből áll a kulcs.
	</para>
	<para>
		Most ezeknek az ismeretében, a programot a következőképpen kell fordítani:
		<command><![CDATA[gcc tores.c -fopenmp -o tores -std=c99]]></command>
	</para>
	<para>
		És futtatni:
		<command><![CDATA[./tores <titkosfájl]]></command>
	</para>
    </section>        
    <section>
        <title>Neurális OR, AND és EXOR kapu</title>
        <para>
            R
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/Koyw6IH5ScQ">https://youtu.be/Koyw6IH5ScQ</link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/nbatfai/bhax/tree/master/attention_raising/NN_R">https://gitlab.com/nbatfai/bhax/tree/master/attention_raising/NN_R</link>               
        </para>
	<para>
	A megoldás forrása Bátfai Norbert tulajdona.
	</para>

        <para>
	A neurális hálózatokban például a machine learning esetében, a neuronok egy gráfban elhelyezkedve egymással kommunikálnak ún. "Activation function", magyarul Aktivációs függvény segítségével.
	</para>
	<para>
	Léteznek bemeneti, kimeneti, és rejtett neuronok is.
	</para>
	<para>
	A bemeneti neuronok kapják meg a bemenetet. Itt több különböző fajta neuront is meg lehet különböztetni. Vannak egybemenetű és több bemenetű neuronok is. Ezeknek a neuronoknak nincs különösebb feldolgozó feladatuk, továbbítják a bemenetet a többi neuronnak.
	</para>
	<para>
	A kimeneti neuronok amik a környezetnek adják tovább a kapott információt.
	</para>
	<para>
	A rejtett neuronoknak pedig a bemenete és a kimenete is csakis más neuronokhoz kapcsolódik.
	</para>
	<para>
	Ezek alapján egy neurális hálónak legalább két rétegből kell állnia. Egy bemenetiből, és egy kimenetiből. Felső határ, azaz hogy a bemeneti és a kimeneti neuronok között hány darab további réteg helyezkedik el, elviekben nincs.
	</para>
	<para>
	Először minden neuron megkapja a saját bemeneteit, és minden neuron ebből a bemenetből előállít egy úgynevezett súlyozott összeget, és ezt az értéket vezeti végig az aktivációs függvényen. Egy példa lehet az, hogy ha a súlyozott összeg pozitív lesz, akkor az érték 1, míg ha a súlyozott összeg negatív, akkor az érték -1 lesz.
	</para> 
  
    </section>        
    <section>
        <title>Hiba-visszaterjesztéses perceptron</title>
        <para>
            C++
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://github.com/nbatfai/nahshon/blob/master/ql.hpp#L64">https://github.com/nbatfai/nahshon/blob/master/ql.hpp#L64</link>             
        </para>
	<para>A megoldás forrása Bátfai Norbert tulajdona.</para>
        <para>
            Perceptronról a Mesterséges Intelligenciák, és a neurális hálók témakörében lehet szó.
		Ellenőrzi a bemenetet, és egy feltétel alapján eldönti, hogy mi legyen a kimenet,
		Egy példa:
        </para>  
	<para>
		Van három bemeneti adatunk amikbe pozitív egész számokat várunk. Ha a három bemeneti számból kettő kisebb mint 0, akkor a kimeneti adat -1 lesz, ha viszont a háromból legalább kettő pozitív szám, akkor a számok összege lesz a kimeneti adat.
	</para>
	<para>
		Ekkor kimondhatjuk, hogy 1 a hibahatár, mert ekkor még megkapjuk az általunk kért dolgot, viszont ha már kettőt hibázunk akkor már -1 lesz a válasz.
	</para>
	<para>
		Ezt a hibahatárt szokták finomítani. Nagyon magas hibahatárnál kezdenek, és egyre kisebbé teszik egészen addig, amíg elfogadható a hibák mennyisége.
	</para>
	<para>
		Persze a mi három bemeneti adatos példánknál nem sokat lehet finomítani, de ha több millió bemeneti adatról beszélünk, ott ez egy elég fontos dolog.
	</para>
    </section>        

</chapter>   
