<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Turing!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
        <title>Végtelen ciklus</title>
        <para>
            Írj olyan C végtelen ciklusokat, amelyek 0 illetve 100 százalékban dolgoztatnak egy magot és egy olyat, amely  
            100 százalékban minden magot!
        </para>

        <para>
            Megoldás forrása: <link xlink:href="https://github.com/Viktorpalffy/bhax/blob/master/bhax/thematic_tutorials/bhax_textbook_IgyNeveldaProgramozod/Turing/ciklus.c">https://github.com/Viktorpalffy/bhax/blob/master/bhax/thematic_tutorials/bhax_textbook_IgyNeveldaProgramozod/Turing/ciklus.c</link>        
        </para>

        <para>
           	Egy magot 100%-on dolgoztatni egész egyszerű feladat, hiszen ha egy szimpla while ciklust megírunk, az
		alapvetően így működik. Egy magot 0%-on dolgoztatni sem egy egetrengető kihívás, viszont itt már kell
		minimálisan gondolkodni. De hamar rájövünk, hogy a sleep(x) parancs kiadásával x másodpercig nem
		használja a processzort a program. Viszont ha nincs parancs a cikluson belül, a processzor ugyanúgy 100 %-on
		dolgozik, ami abból adódik, hogy az operációs rendszer elvégzendő feladatnak tekinti és neki adja az összes processzoridőt.
		Viszont az összes magot 100 %-on dolgoztatni nehezebb feladatnak bizonyult. Az egyik ismerősöm tanácsára az OpenMP-t kezdtem el
		nézegetni a feladat megoldásához. Pár fórumbejegyzés és egy kis utánajárás után pedig sikerült a feladatot megoldanom.
        </para> 
	<para>
	A programot roppant egyszerű használni. Ha egy magot szeretnénk 100%-ban 		dolgoztatni, akkor semmit nem kell módosítani, szimplán csak le kell fordítani és 	 	futtatni.
	</para>
	<para>
Ha egy magot szeretnénk 100%-ban dolgoztatni, akkor vegyük ki a <command>//</command>-t a
	</para>
	<programlisting>
	<![CDATA[//sleep(1)]]>
	</programlisting>
	<para>
	függvényhívásból.	
	</para>
	<para>
	Ha pedig az összes magot szeretnénk 100%-ban dolgoztatni, akkor ugyanúgy a <command>//</command>-t kell kitörölni a következő helyről:
	</para>

        <programlisting>
	<![CDATA[#pragma omp parallel while]]>
	</programlisting>
         
    </section>        
        
    <section>
        <title>Lefagyott, nem fagyott, akkor most mi van?</title>
        <para>
            Mutasd meg, hogy nem lehet olyan programot írni, amely bármely más programról eldönti, hogy le fog-e fagyni vagy sem!
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Nem tudunk olyan programot írni, ami minden más programról eldönti, hogy van e benne végtelen ciklus. Mivel, ha tudnánk, akkor már valószínűleg lett volna olyan ember, aki ezt a programot megírja.       
        </para>

	<para>
De tegyük fel, hogy megírjuk ezt a programot, aminek a neve legyen eldöntő. Annak a programnak a neve, amelyről el kell dönteni, hogy van e benne végtelen ciklus, legyen eldöntendő. Nyílván az eldöntő bemeneti argumentuma lesz az eldöntendő. Ahhoz, hogy eldöntő megállapítsa, hogy van e eldöntendőben végtelen ciklus, futtatnia kell az eldöntendő kérdéses részleteit. Ekkor ha az eldöntendő programban nincs végtelen ciklus, eldöntő hamissal tér vissza, ami azt jelenti, hogy nincs eldöntendőben végtelen ciklus.
        </para>
	<para>
	Azonban ha az eldöntendő programban tényleg van egy végtelen ciklus, és azt eldöntő futtatja, hogy megbizonyosodjon rőla, akkor eldöntő maga is egy végtelen ciklussá válik. Éppen ezért eldöntő sose fog igazzal visszatérni, mert minden ilyen esetben ő is le fog fagyni.
	
        </para>
    </section>        
                
    <section>
        <title>Változók értékének felcserélése</title>
        <para>
            Írj olyan C programot, amely felcseréli két változó értékét, bármiféle logikai utasítás vagy kifejezés
            nasználata nélkül!
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://bhaxor.blog.hu/2018/08/28/10_begin_goto_20_avagy_elindulunk">https://bhaxor.blog.hu/2018/08/28/10_begin_goto_20_avagy_elindulunk</link>
        </para>
        <para>
            Megoldás forrása:<link xlink:href="https://github.com/Viktorpalffy/bhax/blob/master/bhax/thematic_tutorials/bhax_textbook_IgyNeveldaProgramozod/Turing/felcserelo.c">https://github.com/Viktorpalffy/bhax/blob/master/bhax/thematic_tutorials/bhax_textbook_IgyNeveldaProgramozod/Turing/felcserelo.c</link> 
        </para>
	<para>
	Annak ellenére, hogy nem használhatunk logikai utasításokat/kifejezéseket, ez egy egyszerű feladatnak bizonyul egy kezdő programozó számára is. Itt most négy módját is bemutatom.
	</para>
	<para>
	A program bekér két számot és eredményül a kettő értékének a felcseréltjét adja vissza.
	</para>

	<programlisting><![CDATA[
	int main()

{
    int a;
    int b;
    int c;
    printf("Kerem a felcserelni kivant szamokat! \n");
    scanf("%d",a);
    scanf("%d",b);
    printf("A ket szam: \n");
    printf("A =" "%d",a);
    printf("B = " "%d",b);

    //Elso valtozat:
    /*
        c = a;
        a = b;
        b = c;
    */
    //Masodik valtozat:
    /*
        a = a-b;
        b = a+b;
        a = b-a;
    */
    //Harmadik valtozat:
    /*
        a = a*b;
        b = a/b;
        a = a/b;
    */
    //Negyedik valtozat:
    /*
        a=a^b;
        b=a^b;
        a=a^b;
    */
    printf("A ket szam felcserelve: \n");
    printf("A =" "%d",a);
    printf("B = " "%d",b);

    return 0;
}]]>
	</programlisting>

	

	

	
	
	
        
    </section>                     

    <section>
        <title>Labdapattogás</title>
        <para>
            Először if-ekkel, majd bármiféle logikai utasítás vagy kifejezés
            nasználata nélkül írj egy olyan programot, ami egy labdát pattogtat a karakteres konzolon! (Hogy mit értek
            pattogtatás alatt, alább láthatod a videókon.)
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://bhaxor.blog.hu/2018/08/28/labdapattogas">https://bhaxor.blog.hu/2018/08/28/labdapattogas</link>
        </para>
        <para>
            Megoldás forrása <link xlink:href="https://bhaxor.blog.hu/2018/08/28/labdapattogas">Bátfai Norbert</link> tulajdona.
        </para>
        <para>
            Ez egy egyszerű program, ami a grafikus megjelenítést imitálja. Egy ladbádnak álcázott o betűt mozgat egy while ciklus segítségével. Ez a program egy nagyon jó kezdet a grafikus felületű 		programokkal való megismerkedéshez.
        </para>
	<para>
	A program két fő részből áll. Az egyik egy függvény, ami a labdát rajzolja ki a konzolra,
	A másik pedig maga a main.
	</para>
	<para>
	A main-ben először létrehozunk egy maxX és egy maxY változót, amiket át is adunk a tx és a ty tömbök méretének.
	</para>
	<para>
	Ezután két for ciklus végigmegy a két tömbön, a második, és az utolsó elemek értéke -1 lesz, a többi elemé pedig 1
	</para>
	<para>
	végül pedig egy while ciklus és a függvény segítségével kiírja a konzolra a labdát.
	</para>
    </section>                     

    <section>
        <title>Szóhossz és a Linus Torvalds féle BogoMIPS</title>
        <para>
            Írj egy programot, ami megnézi, hogy hány bites a szó a gépeden, azaz mekkora az <type>int</type> mérete.
            Használd ugyanazt a while ciklus fejet, amit Linus Torvalds a BogoMIPS rutinjában! 
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://www.youtube.com/watch?v=xLu3I6lBH-E">https://www.youtube.com/watch?v=xLu3I6lBH-E</link>
            
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://github.com/Viktorpalffy/bhax/blob/master/bhax/thematic_tutorials/bhax_textbook_IgyNeveldaProgramozod/Turing/bogo.cpp"></link>
           
        </para>
        <para>
           A BogoMips a processzorunk sebességének meghatározásához használatos mértékegység. Azt mondja meg, hogy a számítógép processzora mekkora szóhosszal dolgozik.
        </para>
	<para>
	Ezt a XOR ^ művelet segítségével számolja ki a program, ami a kizáró vagy művelete. Az int értékének 1-et adunk, és addig shifteljük balra, ameddig lehet, vagyis amíg az int értéke egyenlő nem lesz nullával. 
	</para>
	<para>
	Közben egy másik változóval számoljuk, hogy hányszor shiftelt balra az int, ezzel meghatározva a szóhosszt. Az én esetemben az eredmény 32 lett, ami a virtuális gép miatt van. Valójában 64 bit-es a processzorom ami 8 bájtnak felel meg.
	</para>
    </section>                     

    <section>
        <title>Helló, Google!</title>
        <para>
            Írj olyan C programot, amely egy 4 honlapból álló hálózatra kiszámolja a négy lap Page-Rank 
            értékét!
        </para>
        <para>
            Megoldás videó: <link xlink:href=""></link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://github.com/Viktorpalffy/bhax/blob/master/bhax/thematic_tutorials/bhax_textbook_IgyNeveldaProgramozod/Turing/pagerank.c"></link>
        </para>
        <para>
            Én a Bevezetés a Programozásba nevű tárgyon már átnézett <link xlink:href="https://github.com/Viktorpalffy/bug-free-computing-machine/blob/master/pagerank.cpp">PageRank</link> programot vettem 		    alapnak, és azt alakítottam át C++-ból C-re. 
        </para>
    </section>
                                                                                                                                                                                                                                                                                                                                                        
    <section xml:id="bhax-textbook-feladatok-turing.MontyHall">
        <title>A Monty Hall probléma</title>
        <para>
            Írj R szimulációt a Monty Hall problémára!
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://bhaxor.blog.hu/2019/01/03/erdos_pal_mit_keresett_a_nagykonyvben_a_monty_hall-paradoxon_kapcsan">https://bhaxor.blog.hu/2019/01/03/erdos_pal_mit_keresett_a_nagykonyvben_a_monty_hall-paradoxon_kapcsan</link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/nbatfai/bhax/tree/master/attention_raising/MontyHall_R">https://gitlab.com/nbatfai/bhax/tree/master/attention_raising/MontyHall_R</link>
        </para>
	<para>
	A megoldás Bátfai Norbert tulajdona.
	</para>
        <para>
            A Monty Hall problémát még középiskolában ismertem meg, sok különböző változata van. Az általam ismert történetben Monty Hall egy műsorvezető volt, akinél a nyertes játékosok választhattak három darab ajtó közül. A háromból két ajtó mögött 1-1 darab kecske, míg a harmadik ajtó mögött egy sportautó volt. A játékos választott egy ajtót, majd Monty Hall, aki tudta, hogy melyik ajtó mögött van az autó, kinyitott egy másik ajtót, ami mögött egy kecske lapult. Ezek után a játékosnak lehetősége volt változtatni a döntésén, vagy maradhatott az eredetileg kiválasztott ajtónál. A kérdés az, hogy mely esetben van több esélye megnyerni az autót? A legtöbb ember azt mondaná, hogy 50-50% esélye van megnyerni az autót, hiszen vagy az egyik ajtó mögött van az autó, vagy a másik mögött. Ekkor persze hiába magyarázzuk, hogy 1/3 esélye van megnyerni az autót, ha nem vált, és 2/3 ha vált, a legtöbb embert elég nehéz meggyőzni erről. Ekkor kell kicsit átalakitani a kérdést. Ha van 1 millió ajtó, ebből kiválaszt a játékos 1-et, majd kinyitnak 999,998 ajtót, amik mögött kecske van, akkor melyik esetben van több esélye a játékosnak megnyerni az autót? Ilyenkor már a legtöbb ember eggyértelműnek tartja, hogy vált, de van olyan ismerősöm, aki még ekkor is azt mondta, hogy 50-50% esélye van megnyerni az autót, ha vált ha nem. Ez a program ennek a játéknak a nyerési eseteit szimulálja. Tízmillió esetből hányszor nyer az, aki mindig vált, és az aki egyáltalán nem vált.
        </para>
    </section>

    <section xml:id="Brun">
        <title>100 éves a Brun tétel</title>
        <para>
            Írj R szimulációt a Brun tétel demonstrálására!
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/xbYhp9G6VqQ">https://youtu.be/xbYhp9G6VqQ</link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/nbatfai/bhax/blob/master/attention_raising/Primek_R">https://gitlab.com/nbatfai/bhax/blob/master/attention_raising/Primek_R</link>
        </para>
	<para>
	A megoldás Bátfai Norbert tulajdona.
	</para>
        <para>
            Mint tudjuk, léteznek a prímszámok. Ezek olyan számok, amik csak 1-el és önmagukkal oszthatóak. Valamint léteznek az ikerprímek. Ezek pedig olyan prímszámpárok, amiknek a különbsége pontosan 2. Ha minden ikerprím reciprokának az összegének vesszük a sorozatát, akkor ez a sorozat egy számhoz konvergál. Ez a szám a Brun-konstans. Nem tudjuk azt, hogy az ikerprímek száma véges vagy végtelen e, de ez nem okoz gondot, hiszen elvileg ha végtelen se lépi túl az összegük a Brun-konstanst. Na most be kell vallanom, hogy számtalan olyan ember létezik a földön, aki nálam jobban ért a matematikához. Viszont nekem erről egy elég érdekes dolog jutott eszembe, ami nem más, mint Zeno paradoxona. E szerint x útat teszünk meg, hogy elérjük a célunkat. Ezek alapján megteszünk 1/2x utat + 1/4x utat + 1/8x utat + 1/16x utat... Ha ezekből képzünk egy sorozatot, az a sorozat 1-hez fog konvergálni, Éppen ezért soha nem érünk el oda, ahova megyünk. Maga a tétel matematikailag helyes, azonban a való életben tudjuk, hogy ez nem így működik.
        </para>
        </section>
        <section>
        <title>Vörös Pipacs Pokol/csiga folytonos mozgási parancsokkal</title>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/uA6RHzXH840">https://youtu.be/uA6RHzXH840</link>      
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://github.com/nbatfai/RedFlowerHell">https://github.com/nbatfai/RedFlowerHell</link>               
        </para>
        <para>
            Ebben a feladatban a karaktert folytonos mozgásra bírtuk, különböző módokon. Ez egy nagyon kezdetleges lépés volt, de mint már azt tudjuk, kis lépés egy karakternek, óriási a hackernek :).
        </para>            
    </section>   

        
        
        
        

</chapter>                
